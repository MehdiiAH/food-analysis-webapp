name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"

      - name: Lint with Ruff
        run: |
          source .venv/bin/activate
          ruff check src/ tests/

      - name: Format check with Ruff
        run: |
          source .venv/bin/activate
          ruff format --check src/ tests/

      - name: Type check with mypy
        run: |
          source .venv/bin/activate
          mypy src/ --ignore-missing-imports

      - name: Test with pytest
        run: |
          source .venv/bin/activate
          pytest --cov=src/food_analysis --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"
          uv pip install bandit safety

      - name: Security check with Bandit
        run: |
          source .venv/bin/activate
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  docker-test:
    name: Build & Test Docker Image
    runs-on: ubuntu-latest
    needs: test # optionnel : dépend des tests Python existants

    steps:
      # 1️⃣ Récupérer le code
      - uses: actions/checkout@v3

      # 2️⃣ Configurer Docker (déjà installé sur ubuntu-latest)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3️⃣ Construire l'image Docker
      - name: Build Docker image
        run: |
          docker build -t my-app:ci .

      # 4️⃣ Tester que le conteneur démarre correctement
      - name: Run container smoke test
        run: |
          docker run --rm -d --name test-container -p 8501:8501 my-app:ci
          sleep 10  # attendre que Streamlit démarre
          curl -f http://localhost:8501/ || (echo "Container not responding" && exit 1)
          docker stop test-container

      # 5️⃣ (Optionnel) Lancer les tests intégrés dans le conteneur
      - name: Run unit tests inside container
        run: docker run --rm my-app:ci python -m unittest discover tests
